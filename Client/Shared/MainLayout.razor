@inherits LayoutComponentBase
<MudLayout>
    @if (user == null || (user != null && !user.IsVerified))
    {
        <MudAppBar Dense Elevation="25" Class="pl-0 ml-0">
            <img style="width:80px;margin-top:50px;margin-left:0;" src="/icon-512.png" />
            <MudSpacer />

        </MudAppBar>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
                <Client.Pages.PageLoginRegister />
            </MudContainer>
        </MudMainContent>
    }
    else
    {
        <MudAppBar Dense Elevation="25">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudText Class="ml-3">@WebHeader.TITLE.ToUpper()</MudText>
            <MudSpacer />
            @if (isReadyInstall)
            {
                <MudTooltip Placement="Placement.Start" Text="Install">
                    <MudIconButton OnClick="InstallWebApp" Class="mr-3" Icon="@Icons.Rounded.InstallMobile" Color="Color.Inherit" />
                </MudTooltip>
            }
            <MudTooltip Placement="Placement.Start" Text="Sign out">
                <MudIconButton OnClick="SignOut" Class="mr-3" Icon="@Icons.Rounded.Logout" Color="Color.Inherit" />
            </MudTooltip>
            @*<LoginDisplay />*@

        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Elevation="25" Fixed>
            <MudDrawerHeader LinkToIndex Dense>
                <MudToolBar Class="p-0 m-0">
                    <img style="width:50px;" class="img-fluid" src="/icon-512.png" />
                    @if (user != null && !string.IsNullOrEmpty(user.Email))
                    {
                        <div>
                            <MudText Class="ml-2 font-weight-bold" Typo="Typo.caption">Attendance PH</MudText>
                            <MudText Class="ml-2" Typo="Typo.caption">@($"+63{user.Email}")</MudText>
                        </div>
                    }
                </MudToolBar>

            </MudDrawerHeader>
            <NavMenu />
        </MudDrawer>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
                @Body
                <MudScrollToTop>
                    <MudFab Size="Size.Small" Color="Color.Primary" Icon="@Icons.Filled.ArrowUpward" />
                </MudScrollToTop>
            </MudContainer>
            <MudDivider Class="mt-5" />
        </MudMainContent>
    }

</MudLayout>
@code {
    bool _drawerOpen = true;
    User user = new();
    protected override async Task OnInitializedAsync()
    {
        var lDotNetReference = DotNetObjectReference.Create(this);
        await jsRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);

        user = await localdb.GetItemAsync<User>(table.table_user);

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            user = await localdb.GetItemAsync<User>(table.table_user);
            if (user == null || (user != null && !user.IsVerified))
            {
                @*var d = await dialog.Show<DialogVerificationCode>("Authentication", new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, CloseButton = false }).Result;
                    if (!d.Cancelled)
                    {
                        user = await localdb.GetItemAsync<User>(table.table_user);
                        if (user.IsVerified)
                            nav.NavigateTo(nav.BaseUri);
                    }*@
            }
        }
    }


    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task SignOut()
    {
        var d = await dialog.ShowMessageBox("Sign out", "You are about to end your session. Are you sure?", yesText: "Sign out", noText: "Cancel");
        if (d.HasValue && d.Value)
        {
            await localdb.ClearAsync();
            await Task.Delay(300);
            nav.NavigateTo(nav.BaseUri, true);
        }
    }

    bool isReadyInstall = false;
    [JSInvokable("MyBlazorInstallMethod")]
    public async void MyBlazorInstallMethod(string str)
    {
        isReadyInstall = true;
        await InvokeAsync(StateHasChanged);
    }
    async Task InstallWebApp()
    {
        var rs = await jsRuntime.InvokeAsync<bool>("BlazorPWA.installPWA");
    }
}