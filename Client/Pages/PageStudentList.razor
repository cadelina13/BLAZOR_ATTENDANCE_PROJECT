@page "/studentlist"
@code {
    User user;

    List<Student> studentlist;
    protected override async Task OnInitializedAsync()
    {
        WebHeader.TITLE = "Students";
        user = await localdb.GetItemAsync<User>(table.table_user);
        var t = new System.Timers.Timer(1000);
        t.Enabled = true;
        t.Elapsed += (s, e) =>
        {
            if (table1 != null)
                table1.ReloadServerData();
            InvokeAsync(StateHasChanged);
            t.Stop();
            t.Dispose();
        };
        t.Start();
        //await LoadData();
    }

    async Task LoadData()
    {
        studentlist = null;
        studentlist = await _db.GetStudentList(user.Email);
        if (studentlist == null) studentlist = new();
        await InvokeAsync(StateHasChanged);
    }
    async Task OnAddClick()
    {
        var d = await dialog.Show<DialogAddStudent>("Add Student", new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall }).Result;
        if (!d.Cancelled)
        {
            var data = (Student)d.Data;
            if (studentlist == null) studentlist = new();
            await LoadData();
            snackbar.Add($"{data.FistName} successfully added to the list.");
        }
    }
    async Task EditStudentClick(Student data)
    {
        var d = await dialog.Show<DialogEditStudent>("Edit",
            new DialogParameters() { ["data"] = data },
            new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall }).Result;
        if (!d.Cancelled)
        {
            var rs = (Student)d.Data;
            await LoadData();
        }
    }



    private IEnumerable<Student> pagedData;
    private MudTable<Student> table1;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<Student>> ServerReload(TableState state)
    {
        IEnumerable<Student> data = await _db.GetStudentList(user.Email);
        data = data.Where(Student =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (Student.FistName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (Student.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{Student.GradeLevel} {Student.ParentsPhoneNumber}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "FistName":
                data = data.OrderByDirection(state.SortDirection, o => o.FistName);
                break;
            case "LastName":
                data = data.OrderByDirection(state.SortDirection, o => o.LastName);
                break;
            case "ParentsPhoneNumber":
                data = data.OrderByDirection(state.SortDirection, o => o.ParentsPhoneNumber);
                break;
            case "GradeLevel":
                data = data.OrderByDirection(state.SortDirection, o => o.GradeLevel);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Student>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table1.ReloadServerData();
    }
}


<div class="row">
    <div class="col-md-12">
        <MudToolBar Dense Class="mb-3 p-0">
            <MudSpacer />
            <MudButton OnClick="OnAddClick" Variant="Variant.Filled" StartIcon="@Icons.Rounded.PersonAdd" Color="Color.Primary" Size="Size.Small">New Student</MudButton>
        </MudToolBar>
        <MudTable ServerData="@(new Func<TableState, Task<TableData<Student>>>(ServerReload))"
                  Dense Hover Outlined @ref="table1">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Students</MudText>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="FirstName" T="Student">FirstName</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="LastName" T="Student">LastName</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Parent's Contact" T="Student">Parent's Contact</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Grade Level" T="Student">Grade Level</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="FistName">@context.FistName</MudTd>
                <MudTd DataLabel="LastName">@context.LastName</MudTd>
                <MudTd DataLabel="Parent's Contact">+63 @context.ParentsPhoneNumber</MudTd>
                <MudTd DataLabel="GradeLevel">@context.GradeLevel</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
</div>