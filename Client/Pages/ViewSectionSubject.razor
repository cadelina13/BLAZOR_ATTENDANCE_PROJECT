@page "/sections/{sectionId}/{subjectId}"
@code {
    [Parameter]
    public string sectionId { get; set; }
    [Parameter]
    public string subjectId { get; set; }


    Section sec = new();
    Subject sub;
    List<Student> studentlist = new();
    List<SubjectRecord> SubjectRecords = new();
    protected override async Task OnInitializedAsync()
    {
        WebHeader.TITLE = "Subjects";
        await LoadData();
    }
    async Task LoadData()
    {
        studentlist = new();
        SubjectRecords = new();
        sec = await _db.GetSection(sectionId);
        sub = await _db.GetSubject(subjectId);
        SubjectRecords = await _db.GetSubjectRecord(subjectId);
        if (SubjectRecords == null) SubjectRecords = new();
        var tasks = new List<Task>();
        foreach (var i in SubjectRecords)
        {
            tasks.Add(Task.Run(async () =>
            {
                var std = await _db.GetStudent(i.StudentId);
                studentlist.Add(std);
            }));
        }
        await Task.WhenAll(tasks);
    }
    async Task OnAddClick()
    {
        var d = await dialog.Show<DialogBrowseStudent>("Student list",
            new DialogParameters() { ["current_studentlist"] = studentlist, ["subjectId"] = sub.Id },
            new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall }).Result;
        if (!d.Cancelled)
        {
            await LoadData();
        }
    }

    async Task RemoveStudentClick(string selectedId)
    {
        var d = await dialog.ShowMessageBox("Confirmation", "You are about to remove this student", yesText: "Remove", noText: "Cancel");
        if (d.HasValue && d.Value)
        {
            await _db.RemoveStudentFromSubect(selectedId, subjectId);
            await LoadData();
        }

    }

    async Task DeleteSection()
    {
        var d = await dialog.ShowMessageBox("Confirmation", "You are about to remove this student", yesText: "Remove", noText: "Cancel");
        if (d.HasValue && d.Value)
        {
            await _db.RemoveSection(sectionId);
            snackbar.Add($"{sec.Name} has been removed.");
            nav.NavigateTo("/sections");
        }
    }

    async Task DeleteClick()
    {
        if (studentlist.Count > 0)
        {
            snackbar.Add("You need to remove the students before you can remove this section.");
            return;
        }
        var d = await dialog.ShowMessageBox("Confirmation", "You are about to delete this section. Are you sure?", yesText: "Delete", noText: "Cancel");
        if (d.HasValue && d.Value)
        {
            var rs = await _db.DeleteSubject(subjectId);
            if (!string.IsNullOrEmpty(rs))
            {
                nav.NavigateTo($"{nav.BaseUri}sections/{sectionId}");
                return;
            }
            snackbar.Add("Something went wrong. Please try again.");
        }
    }
    async Task EditClick()
    {
        var d = await dialog.Show<DialogEditSubject>("Edit",
            new DialogParameters() { ["data"] = sub },
            new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall }).Result;
        if (!d.Cancelled)
        {
            sub = null;
            await InvokeAsync(StateHasChanged);
            sub = await _db.GetSubject(subjectId);
            snackbar.Add("Subject updated.");
        }
    }
}


<MudToolBar Dense Class="mb-3 p-0">
    <MudButton OnClick="@(()=> nav.NavigateTo($"/sections/{sectionId}"))" StartIcon="@Icons.Rounded.ArrowBackIos" Size="Size.Small" Color="Color.Primary">Back</MudButton>
    <MudSpacer />
    <MudTooltip Text="Browse Student" Placement="Placement.Start">
        <MudIconButton OnClick="OnAddClick" Variant="Variant.Filled" Icon="@Icons.Rounded.PersonAdd" Color="Color.Primary" Size="Size.Small" />
    </MudTooltip>
    <MudTooltip Text="Attendance records" Placement="Placement.Left">
        <MudIconButton Class="ml-3" OnClick="@(()=> nav.NavigateTo($"{nav.BaseUri}sections/{sectionId}/{subjectId}/attendance"))" Icon="@Icons.Rounded.CalendarToday" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" />
    </MudTooltip>
</MudToolBar>
<div class="row">
    <div class="col-md-12">
        <MudPaper Class="p-3 mb-3" Elevation="25">
            @if (sub == null || sec == null)
            {
                <MudProgressLinear Size="Size.Small" Color="Color.Primary" Indeterminate />
            }
            else
            {
                <MudText Color="Color.Primary" Typo="Typo.h6">@sec.Name</MudText>
                <MudToolBar Dense Class="m-0 p-0">
                    <MudMenu Class="mr-1" Variant="Variant.Text" Icon="@Icons.Rounded.MoreVert" Size="Size.Small" Color="Color.Default">
                        <MudMenuItem OnClick="EditClick" Class="text-success">Edit</MudMenuItem>
                        <MudMenuItem OnClick="DeleteClick" Class="text-danger">Delete</MudMenuItem>
                    </MudMenu>
                    <MudText Typo="Typo.subtitle1">@sub.SubjectName</MudText>
                </MudToolBar>
            }
            <MudTable Outlined Items="studentlist" T="Student" SortLabel="Sort by" Hover Dense>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<Student, object>(x=>x.FistName)">First Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Student, object>(x=>x.LastName)">Last Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Student, object>(x=>x.ParentsPhoneNumber)">Parent's Contact</MudTableSortLabel></MudTh>
                    <MudTh Style="width:1%">*</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Fist Name">@context.FistName</MudTd>
                    <MudTd DataLabel="Last Name">@context.LastName</MudTd>
                    <MudTd DataLabel="Parent's Contact">@context.ParentsPhoneNumber</MudTd>
                    <MudTd>
                        <MudIconButton OnClick="@(()=> RemoveStudentClick(context.Id))" Size="Size.Small" Color="Color.Secondary" Icon="@Icons.Rounded.Close" Class="p-1" />
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{50, 100}" />
                </PagerContent>
            </MudTable>

        </MudPaper>
    </div>
</div>

