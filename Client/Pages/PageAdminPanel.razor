@page "/admin"
@code {
    BalanceViewModel smsData = new();
    bool IsAdmin = false;
    bool isReloading = false;
    protected override async Task OnInitializedAsync()
    {
        var d = await dialog.Show<DialogAdminVerification>("Authentication", new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall }).Result;
        if (!d.Cancelled)
        {
            IsAdmin = true;
            await GetBalance();
            await InvokeAsync(StateHasChanged);
        }
    }
    async Task GetBalance()
    {
        isReloading = true;
        if(_table != null)
        {
            await _table.ReloadServerData();
        }
        smsData = await _db.GetSMSBalance();
        isReloading = false;
    }


    private IEnumerable<User> pagedData;
    private MudTable<User> _table;
    private int totalItems;
    private string searchString = null;
    private async Task<TableData<User>> ServerReload(TableState state)
    {
        IEnumerable<User> data = (await _db.GetListUsers()).OrderByDescending(x=>x.DateRegistered);
        data = data.Where(User =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (User.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (User.PIN.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (User.DateRegistered.ToLongDateString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "Emails":
                data = data.OrderByDirection(state.SortDirection, o => o.Email);
                break;
            case "PIN":
                data = data.OrderByDirection(state.SortDirection, o => o.PIN);
                break;
            case "Registered":
                data = data.OrderByDirection(state.SortDirection, o => o.DateRegistered);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<User>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        _table.ReloadServerData();
    }

    async Task AddSMSDialog(User _user)
    {
        var d = await dialog.Show<DialogAddSMSBalance>("Add SMS",
            new DialogParameters() { ["user"] = _user },
            new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall }).Result;
    }
}

@if (IsAdmin)
{
    <MudToolBar Class="p-0 m-0" Dense>
        <MudSpacer />
        <MudButton Disabled="isReloading" Color="Color.Success" OnClick="GetBalance" Size="Size.Small" Variant="Variant.Text" StartIcon="@Icons.Rounded.Refresh">Refresh</MudButton>
    </MudToolBar>
    <div class="row">
        <div class="col-md-3 pb-3">
            <MudPaper Class="p-2" Elevation="25">
                @if (isReloading)
                {
                    <MudProgressLinear Indeterminate Size="Size.Small" Color="Color.Primary" />
                }
                <MudTextField Disabled="isReloading" Label="Balance" ReadOnly Text="@smsData.amount.ToString()" T="string" Adornment="Adornment.Start" AdornmentText="$" Variant="Variant.Outlined" Class="mb-3" />
                <MudTextField Disabled="isReloading" Label="Remaining SMS" ReadOnly Text="@string.Format("{0:n0}", smsData.remaining_sms)" T="string" Variant="Variant.Outlined" Class="mb-3" />

            </MudPaper>
        </div>
        <div class="col-md-9 pb-3">
            <MudTable Bordered Elevation="25" ServerData="@(new Func<TableState, Task<TableData<User>>>(ServerReload))"
                      Dense Hover Striped @ref="_table">
                <ToolBarContent>
                    <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    <MudSpacer />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortLabel="PIN" T="User">SMS</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Emails" T="User">Phone</MudTableSortLabel></MudTh>
                    <MudTh Style="width:1%"><MudTableSortLabel SortLabel="PIN" T="User">PIN</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Registered" T="User">Registered</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="SMS">
                        <MudIconButton OnClick="@(()=> AddSMSDialog(context))" Icon="@Icons.Rounded.AddComment" Size="Size.Small" Class="p-1 mr-3" Color="Color.Success" />
                        @string.Format("{0:n0}", context.SMS)
                    </MudTd>
                    <MudTd DataLabel="Phone">@context.Email</MudTd>
                    <MudTd DataLabel="PIN">@context.PIN</MudTd>
                    <MudTd DataLabel="Registered">@context.DateRegistered.ToString("MM-dd-yyyy hh:mm tt")</MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </div>
    </div>
}
else
{

}
