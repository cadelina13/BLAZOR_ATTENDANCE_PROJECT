@page "/sections/{sectionId}/{subjectId}/attendance"
@code {
    [Parameter]
    public string sectionId { get; set; }
    [Parameter]
    public string subjectId { get; set; }
    User user;
    List<Student> studentlist = new();
    List<SubjectRecord> SubjectRecords = new();

    DateTime? _selectedDate = DateTime.Now.Date;
    int presentCount = 0, absentCount = 0;

    Section sec = new();
    Subject sub = new();
    //string tbl_recordid;
    protected override async Task OnInitializedAsync()
    {
        WebHeader.TITLE = "Attendance Records";
        //tbl_recordid = $"{table.table_attend_record}{sectionId}{subjectId}";
        user = await localdb.GetItemAsync<User>(table.table_user);
        await LoadData();
    }

    async Task LoadData()
    {
        studentlist = new();
        SubjectRecords = new();
        sec = await _db.GetSection(sectionId);
        sub = await _db.GetSubject(subjectId);
        SubjectRecords = await _db.GetSubjectRecord(subjectId);
        if (SubjectRecords == null) SubjectRecords = new();
        var tasks = new List<Task>();
        foreach (var i in SubjectRecords)
        {
            tasks.Add(Task.Run(async () =>
            {
                var std = await _db.GetStudent(i.StudentId);
                studentlist.Add(std);
            }));
        }
        await Task.WhenAll(tasks);

        await GetAttendanceRecord();
    }
    //List<AttendanceRecord> records = new();
    List<AttendanceRecord> listattrecords;
    async Task GetAttendanceRecord()
    {
        var param = new AttendanceViewModel();
        param.userId = user.Email;
        param.subjectId = subjectId;
        param.selectedDate = _selectedDate.Value;
        listattrecords = await _db.GetAttendanceRecords(param);
        if (_selectedDate.HasValue)
        {
            presentCount = listattrecords.Where(x => x.IsPresent).Count();
            absentCount = listattrecords.Where(x => !x.IsPresent).Count();
        }
        await InvokeAsync(StateHasChanged);
    }

    async Task DateChanged(DateTime? d)
    {
        _selectedDate = d;
        await GetAttendanceRecord();
    }
    async Task OnStudentClick(AttendanceRecord data)
    {
        var post = await _db.UpdateAttendanceRecord(data);
        await GetAttendanceRecord();
    }
    async void SaveAttRecord(AttendanceRecord data)
    {
        await _db.SaveAttendanceRecord(data);
    }

    async Task NotifyParentsClick()
    {
        var listabsent = listattrecords.Where(x => !x.IsPresent).ToList();

        var d = await dialog.Show<DialogSendCustomMessage>("Notify Parents",
            new DialogParameters() { ["studentlist"] = studentlist, ["listabsent"] = listabsent, ["sub"] = sub, ["selectedDate"] = _selectedDate.Value, ["selectedTime"] = sub.Time },
            new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall }).Result;
        if (!d.Cancelled)
        {
            snackbar.Add("Your message has been sent.");
        }
    }

}
<MudToolBar Dense Class="mb-3 p-0">
    <MudButton OnClick="@(()=> nav.NavigateTo($"sections/{sectionId}/{subjectId}"))" StartIcon="@Icons.Rounded.ArrowBackIos" Size="Size.Small" Color="Color.Primary">Back</MudButton>
    <MudSpacer />
</MudToolBar>

<div class="row">
    <div class="col-md-12 pb-5">
        <MudPaper Class="p-3" Elevation="25">
            <MudText Color="Color.Primary" Typo="Typo.h6">@sec.Name</MudText>
            <MudText Class="mb-3" Typo="Typo.subtitle1">@sub.SubjectName</MudText>
        </MudPaper>
    </div>
    <div class="col-md-4">
        <MudPaper Elevation="25" Class="p-2">
            <MudHidden Breakpoint="Breakpoint.Xs">
                <MudDatePicker Date="_selectedDate" Margin="Margin.None" DisableToolbar Variant="Variant.Text" Orientation="Orientation.Portrait" DateChanged="DateChanged" PickerVariant="PickerVariant.Static" Elevation="0" />
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.SmAndUp">
                <MudDatePicker Date="_selectedDate" Margin="Margin.None" DisableToolbar Variant="Variant.Text" Orientation="Orientation.Portrait" DateChanged="DateChanged" PickerVariant="PickerVariant.Dialog" Elevation="0" />
            </MudHidden>
            <MudButton Class="mr-auto align-self-start" OnClick="@(()=> { _selectedDate = DateTime.Now.Date; })">Today</MudButton>
        </MudPaper>

    </div>
    <div class="col-md-8">
        <MudPaper Class="p-3" Elevation="25">
            <MudToolBar Class="p-0 m-0" Dense>
                <MudText Typo="Typo.h6" Color="Color.Primary">Students (@studentlist.Count)</MudText>
                <MudSpacer />
                <MudText Typo="Typo.h6" Color="Color.Primary">@_selectedDate.Value.ToString("MM-dd-yyyy")</MudText>
            </MudToolBar>
            <MudToolBar Class="p-0 m-0" Dense>
                <MudText Color="Color.Default" Typo="Typo.caption">Present: @presentCount</MudText>
                <MudText Class="ml-3" Color="Color.Default" Typo="Typo.caption">Absent: @absentCount</MudText>
                <MudSpacer />
                <MudButton Disabled="absentCount == 0" OnClick="NotifyParentsClick" StartIcon="@Icons.Rounded.Send" Size="Size.Small" Color="Color.Primary" Variant="Variant.Outlined">Notify Parents</MudButton>
            </MudToolBar>
            @if (listattrecords != null)
            {
                <MudList Clickable Dense>
                    @foreach (var i in studentlist)
                    {
                        var attrec = listattrecords.Where(x => x.StudentId == i.Id).FirstOrDefault();
                        if (attrec == null)
                        {
                            attrec = new();
                            attrec.SubjectId = subjectId;
                            attrec.StudentId = i.Id;
                            attrec.UserId = user.Email;
                            attrec.DateAttended = _selectedDate.Value.Date;
                            attrec.IsPresent = false;
                            SaveAttRecord(attrec);
                        }
                        <MudListItem OnClick="@(()=> OnStudentClick(attrec))" Avatar="@(attrec.IsPresent ? Icons.Rounded.Check : Icons.Rounded.PersonOutline)" IconColor="@(attrec.IsPresent ? Color.Success : Color.Secondary)" AvatarClass="bg-white">@i.FistName @i.LastName</MudListItem>
                    }
                </MudList>
            }

        </MudPaper>
    </div>
</div>